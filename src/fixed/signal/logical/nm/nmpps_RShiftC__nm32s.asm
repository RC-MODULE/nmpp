//------------------------------------------------------------------------
//
//  $Workfile:: ARSH32.as $
//
//  Векторно-матричная библиотека
//
//  Copyright (c) RC Module Inc.
//
//  $Revision: 1.1 $      $Date: 2004/11/22 13:50:04 $
//
//! \if file_doc
//!
//! \file   ARSH32.asm
//! \author Сергей Мушкаев
//! \brief  Функции сдвига для векторов.
//!
//! \endif
//!
//------------------------------------------------------------------------
//#include "vShift.h"

	extern vec_vsum_shift_data_0:label;
	extern vec_vsum_data_0:label;


data ".data_nmplv_G"

global	vec_tbl_nb_int_EvenRightShift:long[16]=(
		//  [  7   ][   6  ][   5  ][   4  ][  3   ][   2  ][   1  ][   0  ]
			1000000000000000000000000000001010000000000000000000000000000010bl,	//nb 0
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 2
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 4
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 6
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 8
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 10
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 12
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 14
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 16
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 18
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 20
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 22
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 24
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 26
			1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 28
			1000000000000000000000000000000010000000000000000000000000000000bl	//nb 30
			);
global	vec_tbl_sb_int_EvenRightShift:long[16]=(
		//  [  7   ][   6  ][   5  ][   4  ][  3   ][   2  ][   1  ][   0  ]
			0000000000000000000000000000101000000000000000000000000000001010bl, //sb 0
			0000000000000000000000000000101000000000000000000000000000001010bl, //sb 2
			0000000000000000000000000010001000000000000000000000000000100010bl, //sb 4
			0000000000000000000000001000001000000000000000000000000010000010bl, //sb 6
			0000000000000000000000100000001000000000000000000000001000000010bl, //sb 8
			0000000000000000000010000000001000000000000000000000100000000010bl, //sb 10
			0000000000000000001000000000001000000000000000000010000000000010bl, //sb 12
			0000000000000000100000000000001000000000000000001000000000000010bl, //sb 14
			0000000000000010000000000000001000000000000000100000000000000010bl, //sb 16
			0000000000001000000000000000001000000000000010000000000000000010bl, //sb 18
			0000000000100000000000000000001000000000001000000000000000000010bl, //sb 20
			0000000010000000000000000000001000000000100000000000000000000010bl, //sb 22
			0000001000000000000000000000001000000010000000000000000000000010bl, //sb 24
			0000100000000000000000000000001000001000000000000000000000000010bl, //sb 26
			0010000000000000000000000000001000100000000000000000000000000010bl, //sb 28
			1000000000000000000000000000001010000000000000000000000000000010bl	//sb 30
			);
	
global	vec_tbl_w_int_EvenRightShift:long[4*16]=(
			// ShiftR 0
			0000000000000001hl,
			0000000000000004hl,
			0000000100000000hl,
			0000000400000000hl,
			// ShiftR 2
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 4
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 6
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 8
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 10
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 12
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 14
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 16
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 18
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 20
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 22
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 24
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 26
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 28
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl,
			// ShiftR 30
			0000000000000000hl,
			0000000000000001hl,
			0000000000000000hl,
			0000000100000000hl
			
			);


global vec_tbl_sb_int_OddRightShift:long[16]=(
		//  [  7   ][   6  ][   5  ][   4  ][  3   ][   2  ][   1  ][   0  ]
			1000000000000000000000000000101010000000000000000000000000001010bl, // sb 1
			1000000000000000000000000000101010000000000000000000000000001010bl,	// sb 3
			1000000000000000000000000010001010000000000000000000000000100010bl,	// sb 5
			1000000000000000000000001000001010000000000000000000000010000010bl,	// sb 7
			1000000000000000000000100000001010000000000000000000001000000010bl,	// sb 9
			1000000000000000000010000000001010000000000000000000100000000010bl,	// sb 11
			1000000000000000001000000000001010000000000000000010000000000010bl,	// sb 13
			1000000000000000100000000000001010000000000000001000000000000010bl,	// sb 15
			1000000000000010000000000000001010000000000000100000000000000010bl,	// sb 17
			1000000000001000000000000000001010000000000010000000000000000010bl,	// sb 19
			1000000000100000000000000000001010000000001000000000000000000010bl,	// sb 21
			1000000010000000000000000000001010000000100000000000000000000010bl,	// sb 23
			1000001000000000000000000000001010000010000000000000000000000010bl,	// sb 25
			1000100000000000000000000000001010001000000000000000000000000010bl,	// sb 27
			1010000000000000000000000000001010100000000000000000000000000010bl,	// sb 29
			1010000000000000000000000000001010100000000000000000000000000010bl	// sb 31
			);

global vec_tbl_nb_int_OddRightShift:long[16]=(
		//  [  7   ][   6  ][   5  ][   4  ][  3   ][   2  ][   1  ][   0  ]
			1110000000000000000000000000001011100000000000000000000000000010bl,	// nb 1
			1111100000000000000000000000000011111000000000000000000000000000bl,	// nb 3
			1111111000000000000000000000000011111110000000000000000000000000bl,	// nb 5
			1111111110000000000000000000000011111111100000000000000000000000bl,	// nb 7
			1111111111100000000000000000000011111111111000000000000000000000bl,	// nb 9
			1111111111111000000000000000000011111111111110000000000000000000bl,	// nb 11
			1111111111111110000000000000000011111111111111100000000000000000bl,	// nb 13
			1111111111111111100000000000000011111111111111111000000000000000bl,	// nb 15
			1111111111111111111000000000000011111111111111111110000000000000bl,	// nb 17
			1111111111111111111110000000000011111111111111111111100000000000bl,	// nb 19
			1111111111111111111111100000000011111111111111111111111000000000bl,	// nb 21
			1111111111111111111111111000000011111111111111111111111110000000bl,	// nb 23
			1111111111111111111111111110000011111111111111111111111111100000bl,	// nb 25
			1111111111111111111111111111100011111111111111111111111111111000bl,	// nb 27
			1111111111111111111111111111111011111111111111111111111111111110bl,	// nb 29
			1111111111111111111111111111111111111111111111111111111111111111bl	// nb 31
			);

global vec_tbl_w_int_OddRightShift:long[6*16]=(
			// ShiftR 1
			0000000000000001hl,
			0000000000000004hl,
			00000000C0000000hl,
			0000000100000000hl,
			0000000400000000hl,
		   0C000000000000000hl,
			// ShiftR 3
			0000000000000000hl,
			0000000000000001hl,
			00000000F0000000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0F000000000000000hl,
			// ShiftR 5
			0000000000000000hl,
			0000000000000001hl,
			00000000FC000000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FC00000000000000hl,
			// ShiftR 7
			0000000000000000hl,
			0000000000000001hl,
			00000000FF000000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FF00000000000000hl,
			// ShiftR 9
			0000000000000000hl,
			0000000000000001hl,
			00000000FFC00000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFC0000000000000hl,

			// ShiftR 11
			0000000000000000hl,
			0000000000000001hl,
			00000000FFF00000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFF0000000000000hl,
			// ShiftR 13	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFC0000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFC000000000000hl,
			// ShiftR 15	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFF0000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFF000000000000hl,
			// ShiftR 17	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFFC000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFFC00000000000hl,
			// ShiftR 19	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFFF000hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFFF00000000000hl,
			// ShiftR 21	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFFFC00hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFFFC0000000000hl,
			// ShiftR 23	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFFFF00hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFFFF0000000000hl,
			// ShiftR 25	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFFFFC0hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFFFFC000000000hl,
			// ShiftR 27	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFFFFF0hl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFFFFF000000000hl,
			// ShiftR 29	
			0000000000000000hl,
			0000000000000001hl,
			00000000FFFFFFFChl,
			0000000000000000hl,
			0000000100000000hl,
		   0FFFFFFFC00000000hl,
			// ShiftR 31
			0000000000000000hl,
			0000000000000000hl,
			00000000FFFFFFFFhl,
			0000000000000000hl,
			0000000000000000hl,
		   0FFFFFFFF00000000hl
			);

// This data for VEC_ARSH32_aaRC macros
global	Table_sb_nb_woper_even:long[6*16]=(
			////[   7  ][  6   ][   5  ][   4  ][  3   ][   2  ][   1  ][   0  ]
				// ShiftR 0
				0000000000000000000000000000101000000000000000000000000000001010bl, //sb 0
				1000000000000000000000000000001010000000000000000000000000000010bl,	//nb 0
				0000000000000001hl,
				0000000000000004hl,
				0000000100000000hl,
				0000000400000000hl,
				// ShiftR 2
				0000000000000000000000000000101000000000000000000000000000001010bl, //sb 2
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 2
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 4
				0000000000000000000000000010001000000000000000000000000000100010bl, //sb 4
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 4
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 6
				0000000000000000000000001000001000000000000000000000000010000010bl, //sb 6
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 6
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 8
			//  [   7  ][  6   ][   5  ][   4  ][  3   ][   2  ][   1  ][   0  ]
				0000000000000000000000100000001000000000000000000000001000000010bl, //sb 8
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 8
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 10
				0000000000000000000010000000001000000000000000000000100000000010bl, //sb 10
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 10
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 12
				0000000000000000001000000000001000000000000000000010000000000010bl, //sb 12
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 12
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 14
				0000000000000000100000000000001000000000000000001000000000000010bl, //sb 14
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 14
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 16
				0000000000000010000000000000001000000000000000100000000000000010bl, //sb 16
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 16
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 18
				0000000000001000000000000000001000000000000010000000000000000010bl, //sb 18
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 18
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 20
				0000000000100000000000000000001000000000001000000000000000000010bl, //sb 20
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 20
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 22
				0000000010000000000000000000001000000000100000000000000000000010bl, //sb 22
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 22
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 24
				0000001000000000000000000000001000000010000000000000000000000010bl, //sb 24
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 24
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 26
				0000100000000000000000000000001000001000000000000000000000000010bl, //sb 26
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 26
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 28
				0010000000000000000000000000001000100000000000000000000000000010bl, //sb 28
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 28
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl,
				// ShiftR 30
				1000000000000000000000000000001010000000000000000000000000000010bl, //sb 30
				1000000000000000000000000000000010000000000000000000000000000000bl,	//nb 30
				0000000000000000hl,
				0000000000000001hl,
				0000000000000000hl,
				0000000100000000hl
				
				);

						   
// This data for VEC_ARSH32_aaRC macros
global	Table_sb_nb_woper_odd:long[8*16]=(
			////[   7  ][  6   ][   5  ][   4  ][  3   ][   2  ][   1  ][   0  ]
				// ShiftR 1
				1000000000000000000000000000101010000000000000000000000000001010bl, //sb 1
				1110000000000000000000000000001011100000000000000000000000000010bl,	//nb 1
				0000000000000001hl,
				0000000000000004hl,
				00000000C0000000hl,
				0000000100000000hl,
				0000000400000000hl,
			   0C000000000000000hl,
				// ShiftR 3
				1000000000000000000000000000101010000000000000000000000000001010bl,	//sb 3
				1111100000000000000000000000000011111000000000000000000000000000bl,	//nb 3
				0000000000000000hl,
				0000000000000001hl,
				00000000F0000000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0F000000000000000hl,
				// ShiftR 5
				1000000000000000000000000010001010000000000000000000000000100010bl,	// sb 5
				1111111000000000000000000000000011111110000000000000000000000000bl,	// nb 5
				0000000000000000hl,
				0000000000000001hl,
				00000000FC000000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FC00000000000000hl,
				// ShiftR 7
				1000000000000000000000001000001010000000000000000000000010000010bl,	// sb 7
				1111111110000000000000000000000011111111100000000000000000000000bl,	// nb 7
				0000000000000000hl,
				0000000000000001hl,
				00000000FF000000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FF00000000000000hl,
				// ShiftR 9
				1000000000000000000000100000001010000000000000000000001000000010bl,	// sb 9
				1111111111100000000000000000000011111111111000000000000000000000bl,	// nb 9
				0000000000000000hl,
				0000000000000001hl,
				00000000FFC00000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFC0000000000000hl,
				// ShiftR 11
				1000000000000000000010000000001010000000000000000000100000000010bl,	// sb 11
				1111111111111000000000000000000011111111111110000000000000000000bl,	// nb 11
				0000000000000000hl,
				0000000000000001hl,
				00000000FFF00000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFF0000000000000hl,
				// ShiftR 13	
				1000000000000000001000000000001010000000000000000010000000000010bl,	// sb 13
				1111111111111110000000000000000011111111111111100000000000000000bl,	// nb 13
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFC0000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFC000000000000hl,
				// ShiftR 15	
				1000000000000000100000000000001010000000000000001000000000000010bl,	// sb 15
				1111111111111111100000000000000011111111111111111000000000000000bl,	// nb 15
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFF0000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFF000000000000hl,
				// ShiftR 17	
				1000000000000010000000000000001010000000000000100000000000000010bl,	// sb 17
				1111111111111111111000000000000011111111111111111110000000000000bl,	// nb 17
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFFC000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFFC00000000000hl,
				// ShiftR 19	
				1000000000001000000000000000001010000000000010000000000000000010bl,	// sb 19
				1111111111111111111110000000000011111111111111111111100000000000bl,	// nb 19
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFFF000hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFFF00000000000hl,
				// ShiftR 21	
				1000000000100000000000000000001010000000001000000000000000000010bl,	// sb 21
				1111111111111111111111100000000011111111111111111111111000000000bl,	// nb 21
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFFFC00hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFFFC0000000000hl,
				// ShiftR 23	
				1000000010000000000000000000001010000000100000000000000000000010bl,	// sb 23
				1111111111111111111111111000000011111111111111111111111110000000bl,	// nb 23
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFFFF00hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFFFF0000000000hl,
				// ShiftR 25	
				1000001000000000000000000000001010000010000000000000000000000010bl,	// sb 25
				1111111111111111111111111110000011111111111111111111111111100000bl,	// nb 25
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFFFFC0hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFFFFC000000000hl,
				// ShiftR 27	
				1000100000000000000000000000001010001000000000000000000000000010bl,	// sb 27
				1111111111111111111111111111100011111111111111111111111111111000bl,	// nb 27
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFFFFF0hl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFFFFF000000000hl,
				// ShiftR 29	
				1010000000000000000000000000001010100000000000000000000000000010bl,	// sb 29
				1111111111111111111111111111111011111111111111111111111111111110bl,	// nb 29
				0000000000000000hl,
				0000000000000001hl,
				00000000FFFFFFFChl,
				0000000000000000hl,
				0000000100000000hl,
			   0FFFFFFFC00000000hl,
				// ShiftR 31
				1010000000000000000000000000001010100000000000000000000000000010bl,	// sb 31
				1111111111111111111111111111111111111111111111111111111111111111bl,	// nb 31
				0000000000000000hl,
				0000000000000000hl,
				00000000FFFFFFFFhl,
				0000000000000000hl,
				0000000000000000hl,
			   0FFFFFFFF00000000hl

					);
   

end ".data_nmplv_G";

import from macros.mlb;

begin ".text_nmplv"



/////////////////////////////////////////////////////////////////////////////////////////
//! \fn void nmppsRShiftC_32s(nm32s *pSrcVec, int nShift, nm32s *pDstVec, int nSize) 
//!
//! \perfinclude _nmppsRShiftC_32s.html
global _nmppsRShiftC_32s:label;
<_nmppsRShiftC_32s>
.branch;
	ar5 = sp - 2;
	push ar0,gr0	with gr7=false;
	push ar1,gr1	with gr7++;
	push ar4,gr4	with gr0=gr7<<1;
	push ar5,gr5;	
	push ar6,gr6	with gr6=gr7<<1;
	
	ar0 = [--ar5];	// pSrcVec
	gr4 = [--ar5];	// Shift
	ar6 = [--ar5];	// pDstVec
	gr5 = [--ar5];	// nSize
	
	gr7=gr4<<31;

	if =0 delayed goto arsh32_Even_by32	with gr5>>=1;// nSize in 64-bit vectors
		nul;
		nul;
	/////////////////////////////////////////////////////////////
	// Shifting by odd number of bits to the right
	ar4 = vec_tbl_sb_int_OddRightShift	with gr4--;
	sb  = [ar4+=gr4]					with gr7 =gr4<<1;
	ar4 = vec_tbl_nb_int_OddRightShift  with gr7+=gr4;
	gr1 = [ar4+=gr4]					with gr4=gr7<<1;
	nb1 = gr1;											
	ar4 = vec_tbl_w_int_OddRightShift;
	ar4+= gr4;		
	rep 6 wfifo=[ar4++],ftw,wtw;

	call vec_vsum_shift_data_0;
		
	
	goto arsh32_Finish;
	
	<arsh32_Even_by32>
	/////////////////////////////////////////////////////////////
	// Shifting by Even number of bits to the right
	ar4 = vec_tbl_sb_int_EvenRightShift;
	sb  = [ar4+=gr4];
	ar4 = vec_tbl_nb_int_EvenRightShift;
	gr1 = [ar4+=gr4];
	nb1 = gr1;											
	ar4 = vec_tbl_w_int_EvenRightShift with gr4<<=2;
	ar4+= gr4;		
	rep 4 wfifo=[ar4++],ftw,wtw;

	call vec_vsum_data_0;
		

	<arsh32_Finish>


	pop ar6,gr6;
	pop ar5,gr5;
	pop ar4,gr4;
	pop ar1,gr1;
	pop ar0,gr0;
	return;
.wait;

end ".text_nmplv";