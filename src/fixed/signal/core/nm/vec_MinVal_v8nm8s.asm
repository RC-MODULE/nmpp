//------------------------------------------------------------------------
//
//  $Workfile:: activate_data.as $
//
//  Векторно-матричная библиотека
//
//  Copyright (c) RC Module Inc.
//
//  $Revision: 1.1 $      $Date: 2004/11/22 13:50:06 $
//
//! \if file_doc
//!
//! \file   activate_data.asm
//! \author Сергей Мушкаев
//! \brief  Функции векторного ядра.
//!
//! \endif
//!
//------------------------------------------------------------------------

begin ".text_nmvcore"
    
    //------------------------------------------------------------------------
    //! \fn void vec_MinVal_v8nm8s(nmreg ar0, nmreg gr0, nmreg gr5, nmreg gr7)
    //!
    //------------------------------------------------------------------------

global vec_MinVal_v8nm8s:label;
<vec_MinVal_v8nm8s>
.branch;
	// ------------------ Поиск максимума среди 8-и 8р. элементов пузырька ----------------------------
	ar5,gr5 =[ar0];
	gr7 = 0FF000000h ;							//  маска для выделения старшего байта 
	gr0 = gr5 and gr7;							//  выделение 7-го элемента, Min=gr0=[7]
	with gr5<<=8;								//  сдвиг 6,5,4-го элемента влево
	gr1 = gr5 and gr7;							//  выделение 6-го элемента
	gr2 = gr1-gr0;								//  сравнение Min=[7] и [6] элемента
	if > delayed skip 4 with gr5<<=8;			// если Min=[7]>[6] ; сдвиг 5,4-го элемента влево
		gr3=gr5 and gr7;						//  выделение 5-го элемента (Min=[7])
		gr2=gr3-gr0;							//  сравнение Min=[7] и [5] элемента
	gr0 = gr1;									//  ,иначе Min=gr0=gr1=[6]
	gr2 = gr3-gr0;								//  ,сравнение Min=[6] и [5] элемента
	if > delayed skip 4 with gr5<<=8;			// если Min=[7|6]>[5] ; сдвиг 4-го элемента влево
		gr1=gr5 and gr7;						//  выделение 4-го элемента (Min=[7|6])
		gr5=ar5 with gr2=gr1-gr0;				//  сравнение Min=[7|6] и [4] элемента, gr5=ar5-младшее 32р. слово пузырька
	gr0 = gr3;									//  ,иначе Min=gr0=gr3=[5]
	gr2 = gr1-gr0;								//  ,сравнение Min=[5] и [4] элемента
	if > delayed skip 4;						// если Min=[7|6|5]>[4] 
		gr3=gr5 and gr7;						//  выделение 3-го элемента (Min=[7|6|5])
		gr2=gr3-gr0;							//  сравнение Min=[7|6|5] и [5] элемента
	gr0 = gr1;									//  ,иначе Min=[4]
	gr2 = gr3-gr0;								//  ,сравнение Min=[4] и [3] элемента
	if > delayed skip 4 with gr5<<=8;			// если Min=[7|6|5|4]>[3] ; сдвиг 2,1,0-го элемента влево
		gr1=gr5 and gr7;						//  выделение 2-го элемента (Min=[7|6|5|4])	
		gr2=gr1-gr0;							//  сравнение Min=[7|6|5|4] и [2] элемента
	gr0 = gr3;									//  ,иначе Min=[3]
	gr2 = gr1-gr0;								//  ,сравнение Min=[3] и [2] элемента
	if > delayed skip 4 with gr5<<=8;			// если Min=[7|6|5|4|3]>[2] ; сдвиг 1,0-го элемента влево
		gr3=gr5 and gr7;						//  выделение 1-го элемента (Min=[7|6|5|4|3])	
		gr2=gr3-gr0;							//  сравнение Min=[7|6|5|4|3] и [1] элемента
	gr0 = gr1;									//  ,иначе Min=[2]
	gr2 = gr3-gr0;								//  ,сравнение Min=[2] и [1] элемента
	if > delayed skip 4 with gr5<<=8;			// если Min=[7|6|5|4|3|2]>[1] ; сдвиг 0-го элемента влево
		gr1=gr5 and gr7;						//  выделение 0-го элемента (Min=[7|6|5|4|3|2])	
		gr2=gr1-gr0;							//  сравнение Min=[7|6|5|4|3|2] и [0] элемента
	gr0 = gr3;									//  ,иначе Min=[1]
	gr2 = gr1-gr0;								//  ,сравнение Min=[1] и [0] элемента
	if > delayed return  with gr0 A>>=24;	// если Min=[7|6|5|4|3|2|1]>[0] ; сдвиг Min вправо до младшего байта
		gr7 = gr0;								//  запись Min=[7|6|5|4|3|2|1] в приемник(младшее слово)
		nul;
		nul;
	delayed return 
		with gr1 A>>=24;						//  ,иначе Min=[0] ; сдвиг Min вправо до младшего байта
		gr7=gr1;								//  ,запись Min=[0] в приемник(младшее слово)
		nul;
.wait;




end ".text_nmvcore";
